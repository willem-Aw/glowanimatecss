* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Arial', sans-serif;
    color: #333;
}

/* register property to css */
@property --grd-deg {
    syntax: "<angle>";
    inherits: true;
    initial-value: -90deg;
}


html {
    color-scheme: dark;
}

body {
    /* --bg-color: #ffffff; */

    background-color: var(--bg-color);
    display: grid;
    place-items: center;
    height: 100vh;
}

.has-bordre {
    --gradient-color: red, blue, green, yellow, red;

    position: relative;
    display: flex;
    align-items: center;
    flex-direction: column;
    justify-content: center;
    width: 400px;
    height: 400px;
    /* background-color: #fff; */
    border-radius: 100vw;
    padding: 1rem;
    border: 2.5px solid transparent;
    background:
        linear-gradient(Canvas 0 0) padding-box,
        conic-gradient(from var(--grd-deg), var(--gradient-color)) border-box;
    isolation: isolate;
    /* the isolation will create a new stacking element */
    animation: glow 5s linear infinite;

    * {
        text-align: center;
        color: #ffffff;
        letter-spacing: .15rem;
    }

    &::after,
    &::before {
        content: '';
        position: absolute;
        border-radius: inherit;
    }

    &::after {
        /* due to isolation : this pseudo-element only come behind its content not the element itself */
        z-index: -2;
        background: conic-gradient(from var(--grd-deg), var(--gradient-color));
        filter: blur(2rem);
        opacity: 0.3;
        inset: 1rem;
    }

    &::before {
        background-color: var(--bg-color, Canvas);
        inset: .5rem;
        z-index: -1;
        filter: blur(.5rem);
    }
}

@keyframes glow {
    from {
        --grd-deg: -90deg;
    }

    to {
        --grd-deg: 270deg;
    }
}